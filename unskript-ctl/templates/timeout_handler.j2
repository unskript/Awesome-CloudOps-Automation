import threading
import functools


def timeout(seconds=60, error_message="Function call timed out"):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            # Container for storing function's result
            result_container = [None]

            # Define a target function for the thread that captures the return value
            def target():
                result_container[0] = func(*args, **kwargs)

            # Start the thread
            thread = threading.Thread(target=target)
            thread.daemon = True
            thread.start()
            thread.join(seconds)

            if thread.is_alive():
                # If the thread is still alive after the timeout, raise a TimeoutError
                raise TimeoutError(error_message)
            else:
                # Return the value stored in the container
                return result_container[0]

        return wrapper
    return decorator