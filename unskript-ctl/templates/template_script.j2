import signal 
import sys
import os
import io
import threading
import functools
import polling2
from polling2 import poll

# Logger object
_logger = None

# Script to check mapping
_script_to_check_mapping = {}

class TimeoutException(Exception):
    pass


def timeout_handler(signum, frame):
    raise TimeoutException("Checks timed out")

def _run_function(fname):
    global w
    l_cell = False
    if fname == "last_cell":
        l_cell = True
    output = None
    success = False 
    output_buffer = io.StringIO()
    sys.stdout = output_buffer
    if l_cell is True:
        last_cell()
        output = output_buffer.getvalue()
    else:
        try:
            fn = globals().get(fname)
            # We use the _script_to_check_mapping runbook_variable to explicitly map 
            # check name to script name.
            chk_name = ''
            if _script_to_check_mapping:
                chk_name = _script_to_check_mapping.get(fname)

            if _logger:
                _logger.debug(f"Starting to execute check {fn} {chk_name}")
            
            response = poll(globals().get(fname), 
                            step=1, 
                            timeout={{ execution_timeout }},
                            max_tries=1,
                            poll_forever=False,
                            check_success= lambda v: v is not None)
            return response
        except polling2.TimeoutException as e:
            # Polling timeout
            if _logger:
                _logger.debug(f"Execution completed for {fn} <-> {chk_name}")
            
            if not hasattr(w, 'timeout_checks'):
                w.timeout_checks = {}
            w.timeout_checks.update({chk_name: str(e).replace(fname,"")})
            if _logger:
                _logger.debug(f"TIMEOUT CHECKS {w.timeout_checks}")

        except Exception as e:
            # If one of the action fails dump the exception on console and proceed further
            print(str(e))
            if _logger:
                _logger.debug(str(e))

            if not hasattr(w, 'errored_checks'):
                w.errored_checks = {}
            w.errored_checks.update({chk_name: str(e).replace(fname,"")})
            if _logger:
                _logger.debug(f"ERRORED CHECKS {w.errored_checks}")

        finally:
            if _logger:
                _logger.debug(f"Completed Execution of {fn} <-> {chk_name}")
    sys.stdout = sys.__stdout__
    
    return output, success

def do_run_(logger = None, script_to_check_mapping = {}):
    import sys
    from tqdm import tqdm
    global _logger 
    global _script_to_check_mapping
    global w
    all_outputs = []

    output = None
    if logger:
        _logger = logger
    
    if script_to_check_mapping:
        _script_to_check_mapping = script_to_check_mapping

    if _logger:
        _logger.debug("Starting to execute {{ num_checks }} number of checks")

    {# check_i should always start with 1 #}
    for i in tqdm(range(1, {{ num_checks + 1 }}), desc="Running", leave=True, ncols=100):
        fn = "check_" + str(i)
        if hasattr(globals().get(fn), "__call__"):
            result = _run_function(fn)
            {# if _logger: #}
                {# _logger.debug(f"FUNCTION: {fn} RESULT FOR FUNCTION RUN : {result}") #}
            if _logger:
                if result:
                    if isinstance(result, tuple):
                        if result[-1]:
                            _logger.debug(f"Check {fn} was successful")
                        else:
                            _logger.debug(f"Check {fn} failed")

        {# Get last_output and last_status #}
        output, _ = _run_function('last_cell')
        all_outputs.append(output)
        {# if _logger:
            _logger.debug(f"ALL OUTPUTS {all_outputs} for {fn}") #}

    # Lets dump the output in the log file so we can refer to the status of it 
    # later on
    if _logger:
        if output:
            _logger.debug(output)
        else:
            _logger.debug("No output for the checks run")

    return all_outputs

if __name__ == "__main__":
    logger = None
    script_to_check_mapping = None
    try:
        logger = sys.argv[1]
        script_to_check_mapping = sys.argv[2]
    except:
        pass 
    do_run_(logger, script_to_check_mapping)