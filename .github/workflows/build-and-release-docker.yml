name: Build and Release Docker

on:
  workflow_dispatch: null
  push:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
      
env:
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: unskript/awesome-runbooks
  DOCKER_USERNAME: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  USERNAME: "jayasimha-raghavan-unskript"
  DOCKER_TARGET: linux/amd64, linux/arm64
   
jobs:
  build-elyra: 
    runs-on: ubuntu-latest 
    strategy:
      fail-fast: false 

    steps:
      - uses: actions/checkout@v3
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d-%s')"
      - name: Install system dependencies
        run: |
          pip install shyaml
      
      - name: Setting Release information
        run: |
          er=`cat docker_release.yml | shyaml get-value elyra.branch`
          echo "ELYRA_RELEASE=$er" >> $GITHUB_ENV
          
      - name: Checkout & Build Code
        run: |
          cd $HOME
          git clone https://${{ env.USERNAME }}:${{ secrets.BUILDER_PAT }}@github.com/unskript/elyra.git elyra
          cd elyra
          git checkout ${{ env.ELYRA_RELEASE }}
          python3 ./setup.py sdist
          mv dist/elyra*.tar.gz /tmp

      - uses: actions/upload-artifact@v3
        with:
          name: elyra-${{ github.run_id }}-${{ env.ELYRA_RELEASE }}
          path: /tmp/elyra-3.0.0.dev0.tar.gz
    
  build-unskript:
    runs-on: ubuntu-latest 
    strategy:
      fail-fast: false 

    steps:
      - uses: actions/checkout@v3
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d-%s')"
      - name: Install system dependencies
        run: |
          pip install shyaml
      
      - name: Setting Release information
        run: |
          ur=`cat docker_release.yml | shyaml get-value unskript.branch`
          echo "UNSKRIPT_RELASE=$ur" >> $GITHUB_ENV

      - name: Checkout Code
        run: |
          cd $HOME
          git clone https://${{ env.USERNAME }}:${{ secrets.BUILDER_PAT }}@github.com/unskript/unskript.git unskript
          cd unskript
          git checkout ${{ env.UNSKRIPT_RELEASE }}
          /usr/bin/env python -m pip install -r ./requirements.txt
          /usr/bin/env python -m pip install --upgrade protobuf
          /usr/bin/env python -m pip install elyra
          make legoschema
          cp ./setup-full.py ./setup.py
          /usr/bin/env python ./setup.py bdist_wheel 
          mv dist/code*tar /tmp
          mv dist/unskript*.whl /tmp
      
      - uses: actions/upload-artifact@v3
        with:
          name: schema-${{ github.run_id }}-${{ env.UNSKRIPT_RELEASE }}
          path: /tmp/code_snippet_schemas.tar

      - uses: actions/upload-artifact@v3
        with:
          name: unskript-${{ github.run_id }}-${{ env.UNSKRIPT_RELEASE }}
          path: /tmp/unskript-0.1.0-py2.py3-none-any.whl
      

  build-jlab-celltoolbar:
    runs-on: ubuntu-latest 
    strategy:
      fail-fast: false 

    steps:
      - uses: actions/checkout@v3
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d-%s')"
      - name: Install system dependencies
        run: |
          pip install shyaml
          sudo apt install nodejs npm
          pip install jupyterlab
      
      - name: Setting Release information
        run: |
          tr=`cat docker_release.yml | shyaml get-value jlab-enhanced-cell-toolbar.branch`
          echo "CELL_TOOLBAR_RELEASE=$tr" >> $GITHUB_ENV

      - name: Checkout Code
        run: |
          cd $HOME
          git clone https://${{ env.USERNAME }}:${{ secrets.BUILDER_PAT }}@github.com/unskript/jlab-enhanced-cell-toolbar.git jlab-enhanced-cell-toolbar
          cd jlab-enhanced-cell-toolbar
          git checkout ${{ env.CELL_TOOLBAR_RELEASE }}
          /usr/bin/env python -m pip install jupyter-packaging
          /usr/bin/env python -m pip install --upgrade markupsafe
          /usr/bin/env python -m pip install --upgrade jinja2 
          jlpm install
          /usr/bin/env python ./setup.py bdist_wheel 
          mv dist/*.whl /tmp
  

      - uses: actions/upload-artifact@v3
        with:
          name: toolbar-${{ github.run_id }}-${{ env.CELL_TOOLBAR_RELEASE }}
          path: /tmp/jlab_enhanced_cell_toolbar-3.4.0-py3-none-any.whl

  build-code-snippets:
    runs-on: ubuntu-latest 
    strategy:
      fail-fast: false 

    steps:
      - uses: actions/checkout@v3
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d-%s')"
      - name: Install system dependencies
        run: |
          pip install shyaml
          sudo apt install nodejs npm
          pip install jupyterlab
      
      - name: Setting Release information
        run: |
          cr=`cat docker_release.yml | shyaml get-value jupyterlab-code-snippets.branch`
          echo "CODE_SNIPPETS_RELEASE=$cr" >> $GITHUB_ENV

      - name: Checkout Code
        run: |
          cd $HOME
          git clone https://${{ env.USERNAME }}:${{ secrets.BUILDER_PAT }}@github.com/unskript/jupyterlab-code-snippets.git jupyterlab-code-snippets
          cd jupyterlab-code-snippets
          git checkout ${{ env.CODE_SNIPPETS_RELEASE }}
          /usr/bin/env python -m pip install jupyter-packaging
          /usr/bin/env python -m pip install --upgrade markupsafe
          /usr/bin/env python -m pip install --upgrade jinja2 
          jlpm install 
          /usr/bin/env python ./setup.py bdist_wheel 
          mv dist/*.whl /tmp
  

      - uses: actions/upload-artifact@v3
        with:
          name: code-snippets-${{ github.run_id }}-${{ env.CODE_SNIPPETS_RELEASE }}
          path: /tmp/jupyterlab_code_snippets-2.1.1-py3-none-any.whl

  build-docker:
    runs-on: ubuntu-latest
    needs: [build-unskript, build-elyra, build-jlab-celltoolbar, build-code-snippets]
    strategy:
      fail-fast: false 

    steps:
      - uses: actions/checkout@v3
      - name: Install system dependencies
        run: |
          pip install shyaml

      - name: Setup Docker Buildx 
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
          config: .github/buildkitd.toml 

      - name: Prepare Docker Buildx
        id: prepare
        run: |
          echo ::set-output name=docker_platform::${DOCKER_TARGET}
          echo ::set-output name=docker_image::${DOCKER_REGISTRY}/${DOCKER_IMAGE}
          echo ::set-output name=version::${GITHUB_RUN_NUMBER}

      - name: Docker Login
        run: |
          echo "USERNAME: ${DOCKER_USERNAME} PASS: ${DOCKER_PASSWORD}"
          echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin

      - name: Setting Release information
        run: |
          er=`cat docker_release.yml | shyaml get-value elyra.branch`
          cr=`cat docker_release.yml | shyaml get-value jupyterlab-code-snippets.branch`
          tr=`cat docker_release.yml | shyaml get-value jlab-enhanced-cell-toolbar.branch`
          ur=`cat docker_release.yml | shyaml get-value unskript.branch`
          rt=`cat docker_release.yml | shyaml get-value tag.release`
          latest=`cat docker_release.yml | shyaml get-value tag.latest`
          echo "ELYRA_RELEASE=$er" >> $GITHUB_ENV
          echo "CODE_SNIPPETS_RELEASE=$cr" >> $GITHUB_ENV
          echo "CELL_TOOLBAR_RELEASE=$tr" >> $GITHUB_ENV
          echo "UNSKRIPT_RELASE=$ur" >> $GITHUB_ENV
          echo "RELEASE_TAG=$rt" >> $GITHUB_ENV 
          echo "LATEST_TAG=$latest" >> $GITHUB_ENV
          
      - name: Checkout Code
        run: |
          cd $HOME
          pwd
          git clone https://${{ env.USERNAME }}:${{ secrets.BUILDER_PAT }}@github.com/unskript/devops.git devops
      
      - uses: actions/download-artifact@v3
        with:
          name: code-snippets-${{ github.run_id }}-${{ env.CODE_SNIPPETS_RELEASE }}
          path: /tmp/code_snippet
    
      - uses: actions/download-artifact@v3
        with:
          name: toolbar-${{ github.run_id }}-${{ env.CELL_TOOLBAR_RELEASE }}
          path: /tmp/jlab_enhanced_cell_toolbar

      - uses: actions/download-artifact@v3
        with:
          name: schema-${{ github.run_id }}-${{ env.UNSKRIPT_RELEASE }}
          path: /tmp/unskript

      - uses: actions/download-artifact@v3
        with:
          name: unskript-${{ github.run_id }}-${{ env.UNSKRIPT_RELEASE }}
          path: /tmp/unskript

      - uses: actions/download-artifact@v3
        with:
          name: elyra-${{ github.run_id }}-${{ env.ELYRA_RELEASE }}
          path: /tmp/elyra
      
      - name: Prepare to Build
        run: |
          cd $HOME/devops/dockers/jupyterlab/oss_docker
          ls -l /tmp/unskript/
          ls -l /tmp/elyra/
          ls -l /tmp/jlab_enhanced_cell_toolbar/ 
          ls -l /tmp/code_snippet/ 
          tar xf /tmp/unskript/code_snippet_schemas.tar
          cd downloads
          mv /tmp/unskript/*.whl .
          mv /tmp/code_snippet/*.whl .
          mv /tmp/jlab_enhanced_cell_toolbar/*.whl .
          mv /tmp/elyra/elyra*tar.gz .
          if [[ ${{ env.LATEST_TAG }} == "true" ]]; then 
              bt="${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_TAG }} ${{ env.DOCKER_IMAGE }}:latest"
          else 
              bt="${{ env.DOCKER_IMAGE }}:${{ env.RELEASE_TAG }}"
          fi
          echo "BUILD_TAGS=$bt" >> $GITHUB_ENV
      
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            elyra-${{ github.run_id }}-${{ env.ELYRA_RELEASE }}
            toolbar-${{ github.run_id }}-${{ env.CELL_TOOLBAR_RELEASE }}
            code-snippets-${{ github.run_id }}-${{ env.CODE_SNIPPETS_RELEASE }}
            unskript-${{ github.run_id }}-${{ env.UNSKRIPT_RELEASE }}
            schema-${{ github.run_id }}-${{ env.UNSKRIPT_RELEASE }}

      - name: Build & Push 
        run: |
          docker buildx create --name mybuilder
          docker buildx use mybuilder
          docker buildx inspect --bootstrap
          docker buildx ls
          cd $HOME/devops/dockers/jupyterlab/oss_docker
          export BUILD_NUMBER=${{ env.RELEASE_TAG }}
          make copy
          docker buildx build --platform linux/amd64,linux/arm64 --push -t ${{ env.BUILD_TAGS }} .

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-docker]
    strategy:
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v3
      - name: Install system dependencies
        run: |
          pip install shyaml

      - name: Setting Release information
        run: |
          er=`cat docker_release.yml | shyaml get-value elyra.branch`
          cr=`cat docker_release.yml | shyaml get-value jupyterlab-code-snippets.branch`
          tr=`cat docker_release.yml | shyaml get-value jlab-enhanced-cell-toolbar.branch`
          ur=`cat docker_release.yml | shyaml get-value unskript.branch`
          rt=`cat docker_release.yml | shyaml get-value tag.release`
          latest=`cat docker_release.yml | shyaml get-value tag.latest`
          echo "ELYRA_RELEASE=$er" >> $GITHUB_ENV
          echo "CODE_SNIPPETS_RELEASE=$cr" >> $GITHUB_ENV
          echo "CELL_TOOLBAR_RELEASE=$tr" >> $GITHUB_ENV
          echo "UNSKRIPT_RELASE=$ur" >> $GITHUB_ENV
          echo "RELEASE_TAG=$rt" >> $GITHUB_ENV 
          echo "LATEST_TAG=$latest" >> $GITHUB_ENV

      - uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            elyra-${{ github.run_id }}-${{ env.ELYRA_RELEASE }}
            toolbar-${{ github.run_id }}-${{ env.CELL_TOOLBAR_RELEASE }}
            code-snippets-${{ github.run_id }}-${{ env.CODE_SNIPPETS_RELEASE }}
            unskript-${{ github.run_id }}-${{ env.UNSKRIPT_RELEASE }}
            schema-${{ github.run_id }}-${{ env.UNSKRIPT_RELEASE }}
